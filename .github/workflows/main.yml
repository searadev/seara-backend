# Nome do Workflow
name: Searadev

# Evento que irÃ¡ acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nelonoel/branch-name@v1.0.1
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '11'
      - run: java -version      

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  #    - name: Configure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: us-east-1

      - name: Build Maven package
        run: mvn --batch-mode --update-snapshots package
        env:
          MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}    

     - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/searadev

      - name: Docker Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/searadev
  
  #DeployProd:
  #  needs: Build
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout Repo
  #      uses: actions/checkout@v2

  #    - name: AWS configure
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

  #    - name: Add github actions IP to security group
  #      env:
  #        AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
  #      run: |
  #        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
  #        sleep 10
  #    - name: Deploy on AWS EC2
  #      env:
  #        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
  #        HOSTNAME: ${{ secrets.HOSTNAME  }}
  #        USER_NAME: ${{ secrets.USERNAME  }}
  #        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #      run: |
  #        echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
  #        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
  #          rm -rf /home/ubuntu/<your-repo-name>
  #          git clone <your-repo-link>.git
  #          cd <your-repo>
  #          git checkout master
  #          git pull origin master
  #          sudo chmod +x ./deploy.sh
  #          ./deploy.sh
  #        '
  #        rm -rf private_key.pem
  #    - name: Remove github actions IP from security group
  #      env:
  #        AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
  #      run: |
  #        aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
  #      if: always()

        